// Code generated by protoc-gen-go.
// source: lldp.proto
// DO NOT EDIT!

/*
Package lldp is a generated protocol buffer package.

It is generated from these files:
	lldp.proto

It has these top-level messages:
	EmptyMessage
	Neighbor
	Interface
*/
package lldp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyMessage struct {
}

func (m *EmptyMessage) Reset()                    { *m = EmptyMessage{} }
func (m *EmptyMessage) String() string            { return proto.CompactTextString(m) }
func (*EmptyMessage) ProtoMessage()               {}
func (*EmptyMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Neighbor struct {
	Portid          string `protobuf:"bytes,1,opt,name=portid" json:"portid,omitempty"`
	Portdescription string `protobuf:"bytes,2,opt,name=portdescription" json:"portdescription,omitempty"`
	Sysname         string `protobuf:"bytes,3,opt,name=sysname" json:"sysname,omitempty"`
	Sysdesc         string `protobuf:"bytes,4,opt,name=sysdesc" json:"sysdesc,omitempty"`
	Address         string `protobuf:"bytes,5,opt,name=address" json:"address,omitempty"`
	Vlan            string `protobuf:"bytes,6,opt,name=vlan" json:"vlan,omitempty"`
	Type            string `protobuf:"bytes,7,opt,name=type" json:"type,omitempty"`
}

func (m *Neighbor) Reset()                    { *m = Neighbor{} }
func (m *Neighbor) String() string            { return proto.CompactTextString(m) }
func (*Neighbor) ProtoMessage()               {}
func (*Neighbor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Interface struct {
	Index        int32  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Mtu          int32  `protobuf:"varint,2,opt,name=mtu" json:"mtu,omitempty"`
	Name         string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Hardwareaddr string `protobuf:"bytes,4,opt,name=hardwareaddr" json:"hardwareaddr,omitempty"`
	Flags        uint32 `protobuf:"varint,5,opt,name=flags" json:"flags,omitempty"`
}

func (m *Interface) Reset()                    { *m = Interface{} }
func (m *Interface) String() string            { return proto.CompactTextString(m) }
func (*Interface) ProtoMessage()               {}
func (*Interface) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*EmptyMessage)(nil), "lldp.EmptyMessage")
	proto.RegisterType((*Neighbor)(nil), "lldp.Neighbor")
	proto.RegisterType((*Interface)(nil), "lldp.Interface")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Lldp service

type LldpClient interface {
	ListInterfaces(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Lldp_ListInterfacesClient, error)
	GetInterfaceDetails(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Interface, error)
	ListInterfaceNeighbors(ctx context.Context, in *Interface, opts ...grpc.CallOption) (Lldp_ListInterfaceNeighborsClient, error)
	ListNeighbors(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Lldp_ListNeighborsClient, error)
}

type lldpClient struct {
	cc *grpc.ClientConn
}

func NewLldpClient(cc *grpc.ClientConn) LldpClient {
	return &lldpClient{cc}
}

func (c *lldpClient) ListInterfaces(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Lldp_ListInterfacesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Lldp_serviceDesc.Streams[0], c.cc, "/lldp.Lldp/ListInterfaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &lldpListInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lldp_ListInterfacesClient interface {
	Recv() (*Interface, error)
	grpc.ClientStream
}

type lldpListInterfacesClient struct {
	grpc.ClientStream
}

func (x *lldpListInterfacesClient) Recv() (*Interface, error) {
	m := new(Interface)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lldpClient) GetInterfaceDetails(ctx context.Context, in *Interface, opts ...grpc.CallOption) (*Interface, error) {
	out := new(Interface)
	err := grpc.Invoke(ctx, "/lldp.Lldp/GetInterfaceDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lldpClient) ListInterfaceNeighbors(ctx context.Context, in *Interface, opts ...grpc.CallOption) (Lldp_ListInterfaceNeighborsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Lldp_serviceDesc.Streams[1], c.cc, "/lldp.Lldp/ListInterfaceNeighbors", opts...)
	if err != nil {
		return nil, err
	}
	x := &lldpListInterfaceNeighborsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lldp_ListInterfaceNeighborsClient interface {
	Recv() (*Neighbor, error)
	grpc.ClientStream
}

type lldpListInterfaceNeighborsClient struct {
	grpc.ClientStream
}

func (x *lldpListInterfaceNeighborsClient) Recv() (*Neighbor, error) {
	m := new(Neighbor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *lldpClient) ListNeighbors(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (Lldp_ListNeighborsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Lldp_serviceDesc.Streams[2], c.cc, "/lldp.Lldp/ListNeighbors", opts...)
	if err != nil {
		return nil, err
	}
	x := &lldpListNeighborsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Lldp_ListNeighborsClient interface {
	Recv() (*Neighbor, error)
	grpc.ClientStream
}

type lldpListNeighborsClient struct {
	grpc.ClientStream
}

func (x *lldpListNeighborsClient) Recv() (*Neighbor, error) {
	m := new(Neighbor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Lldp service

type LldpServer interface {
	ListInterfaces(*EmptyMessage, Lldp_ListInterfacesServer) error
	GetInterfaceDetails(context.Context, *Interface) (*Interface, error)
	ListInterfaceNeighbors(*Interface, Lldp_ListInterfaceNeighborsServer) error
	ListNeighbors(*EmptyMessage, Lldp_ListNeighborsServer) error
}

func RegisterLldpServer(s *grpc.Server, srv LldpServer) {
	s.RegisterService(&_Lldp_serviceDesc, srv)
}

func _Lldp_ListInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LldpServer).ListInterfaces(m, &lldpListInterfacesServer{stream})
}

type Lldp_ListInterfacesServer interface {
	Send(*Interface) error
	grpc.ServerStream
}

type lldpListInterfacesServer struct {
	grpc.ServerStream
}

func (x *lldpListInterfacesServer) Send(m *Interface) error {
	return x.ServerStream.SendMsg(m)
}

func _Lldp_GetInterfaceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Interface)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LldpServer).GetInterfaceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lldp.Lldp/GetInterfaceDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LldpServer).GetInterfaceDetails(ctx, req.(*Interface))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lldp_ListInterfaceNeighbors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Interface)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LldpServer).ListInterfaceNeighbors(m, &lldpListInterfaceNeighborsServer{stream})
}

type Lldp_ListInterfaceNeighborsServer interface {
	Send(*Neighbor) error
	grpc.ServerStream
}

type lldpListInterfaceNeighborsServer struct {
	grpc.ServerStream
}

func (x *lldpListInterfaceNeighborsServer) Send(m *Neighbor) error {
	return x.ServerStream.SendMsg(m)
}

func _Lldp_ListNeighbors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EmptyMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LldpServer).ListNeighbors(m, &lldpListNeighborsServer{stream})
}

type Lldp_ListNeighborsServer interface {
	Send(*Neighbor) error
	grpc.ServerStream
}

type lldpListNeighborsServer struct {
	grpc.ServerStream
}

func (x *lldpListNeighborsServer) Send(m *Neighbor) error {
	return x.ServerStream.SendMsg(m)
}

var _Lldp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lldp.Lldp",
	HandlerType: (*LldpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInterfaceDetails",
			Handler:    _Lldp_GetInterfaceDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListInterfaces",
			Handler:       _Lldp_ListInterfaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListInterfaceNeighbors",
			Handler:       _Lldp_ListInterfaceNeighbors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNeighbors",
			Handler:       _Lldp_ListNeighbors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("lldp.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4b, 0x4e, 0xc3, 0x30,
	0x14, 0x24, 0x34, 0x69, 0xe9, 0x53, 0x3f, 0xc8, 0xa0, 0xca, 0x62, 0x85, 0xb2, 0xea, 0xaa, 0x42,
	0xb0, 0x40, 0x2c, 0xd8, 0x81, 0x10, 0x52, 0x61, 0x91, 0x1b, 0xb8, 0xf5, 0x6b, 0x6b, 0x29, 0x4d,
	0x22, 0xdb, 0x7c, 0xba, 0xe4, 0x6a, 0x9c, 0x89, 0x03, 0x90, 0x67, 0xa7, 0xe9, 0x47, 0xd9, 0xcd,
	0xcc, 0x9b, 0xb1, 0xc7, 0x1f, 0x80, 0x34, 0x95, 0xc5, 0xa4, 0xd0, 0xb9, 0xcd, 0x59, 0x48, 0x38,
	0x1e, 0x40, 0xef, 0x79, 0x5d, 0xd8, 0xcd, 0x1b, 0x1a, 0x23, 0x96, 0x18, 0xff, 0x06, 0x70, 0xf6,
	0x8e, 0x6a, 0xb9, 0x9a, 0xe5, 0x9a, 0x8d, 0xa0, 0x5d, 0xe4, 0xda, 0x2a, 0xc9, 0x83, 0xeb, 0x60,
	0xdc, 0x4d, 0x2a, 0xc6, 0xc6, 0x30, 0x24, 0x24, 0xd1, 0xcc, 0xb5, 0x2a, 0xac, 0xca, 0x33, 0x7e,
	0xea, 0x0c, 0xc7, 0x32, 0xe3, 0xd0, 0x31, 0x1b, 0x93, 0x89, 0x35, 0xf2, 0x96, 0x73, 0x6c, 0x69,
	0x35, 0x21, 0x2f, 0x0f, 0xeb, 0x09, 0x51, 0x9a, 0x08, 0x29, 0x75, 0x59, 0x88, 0x47, 0x7e, 0x52,
	0x51, 0xc6, 0x20, 0xfc, 0x4c, 0x45, 0xc6, 0xdb, 0x4e, 0x76, 0x98, 0x34, 0xbb, 0x29, 0x90, 0x77,
	0xbc, 0x46, 0x38, 0xfe, 0x09, 0xa0, 0xfb, 0x9a, 0x59, 0xd4, 0x0b, 0x31, 0x47, 0x76, 0x09, 0x91,
	0xca, 0x24, 0x7e, 0xbb, 0x43, 0x44, 0x89, 0x27, 0xec, 0x1c, 0x5a, 0x6b, 0xfb, 0xe1, 0x7a, 0x47,
	0x09, 0x41, 0x5a, 0x69, 0xaf, 0xa8, 0xc3, 0x2c, 0x86, 0xde, 0x4a, 0x68, 0xf9, 0x25, 0x34, 0x52,
	0x89, 0xaa, 0xea, 0x81, 0x46, 0xeb, 0x2f, 0x52, 0xb1, 0xf4, 0x6d, 0xfb, 0x89, 0x27, 0xb7, 0x7f,
	0x01, 0x84, 0xd3, 0xf2, 0x86, 0xd9, 0x03, 0x0c, 0xa6, 0xca, 0xd8, 0xba, 0x4f, 0x79, 0x8c, 0x89,
	0x7b, 0x86, 0xfd, 0x7b, 0xbf, 0x1a, 0x7a, 0xad, 0x76, 0xc5, 0x27, 0x37, 0x41, 0x19, 0xbd, 0x78,
	0xc1, 0x5d, 0xf2, 0x09, 0xad, 0x50, 0xa9, 0x61, 0xc7, 0xde, 0x86, 0x30, 0x7b, 0x84, 0xd1, 0xc1,
	0xae, 0xdb, 0x37, 0x6d, 0x48, 0x0f, 0xbc, 0xb0, 0x75, 0xb8, 0x9d, 0xef, 0xa1, 0x4f, 0xf1, 0x5d,
	0xaa, 0xa9, 0x73, 0x43, 0x70, 0xd6, 0x76, 0x9f, 0xeb, 0xee, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x15,
	0x5e, 0x19, 0x0d, 0x6a, 0x02, 0x00, 0x00,
}
